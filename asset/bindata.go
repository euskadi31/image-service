// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// docs/index.html
// docs/swagger.yaml
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x8e\xd3\x30\x10\xbd\xf3\x15\xd3\x5c\xb8\xe0\x38\x5d\x84\x04\x25\xa9\x84\x58\x24\x38\xb1\x5a\x71\xe1\xe8\xda\x53\x67\x90\x63\x5b\xf6\xa4\x6d\x40\xfc\x3b\x6a\xa2\xb6\xc9\xaa\x22\x97\xf8\x79\x5e\xde\xcc\x9b\x99\xd4\xab\xc7\xef\x9f\x7f\xfc\x7c\xfa\x02\x2d\x77\x6e\xfb\xaa\x9e\x5e\x00\x00\x75\x8b\xca\x4c\xc7\x11\x32\xb1\xc3\xed\xd7\x21\x62\x8a\xa4\xe1\xd3\xd3\x37\x78\xc6\x3d\x26\xf4\x1a\x6b\x39\x45\x6f\xec\x95\x10\xe0\x11\x0d\x1a\xd8\x87\x04\xca\xa8\xc8\x74\x40\x30\x98\xc9\x7a\x10\x62\xc6\xed\x90\x15\x78\xd5\x61\x53\x1c\x08\x8f\x31\x24\x2e\x40\x07\xcf\xe8\xb9\x29\x8e\x64\xb8\x6d\x0c\x1e\x48\xa3\x18\xc1\x1b\x20\x4f\x4c\xca\x89\xac\x95\xc3\x66\x5d\x80\xbc\x2f\x67\x30\xeb\x44\x91\x29\xf8\x99\xe2\xb5\xec\xb1\x34\x6e\x71\x34\x93\x31\x1d\xd0\xc0\x6e\x80\x8b\xc7\xf2\x8e\xae\x6e\x55\xca\xc8\x4d\xd1\xf3\x5e\xbc\x5f\x12\x56\x42\x5c\xc1\x33\x3e\x06\x0d\x26\x60\xf6\xaf\xf9\xfc\x95\xb7\x08\xa1\x67\x4c\x10\x95\x45\xc8\x3c\x38\xcc\x57\xfa\xa2\x1f\x63\xec\x86\x77\xc1\x0c\xf0\xe7\x0a\xcf\x4f\xa7\x92\x25\xbf\x81\xea\xe3\xe2\x3a\x2a\x63\xc8\xdb\xc5\xfd\xdf\xeb\x49\x45\x12\x2e\xd8\xf0\x42\xab\x45\xb2\x2d\x6f\x60\x5d\x55\xf1\xb4\xd4\x63\x3c\xb1\x50\x8e\xac\xdf\x80\xc3\x3d\xc3\x8a\xba\xf3\x74\x94\xe7\xff\x26\xa0\xce\xbe\x48\x32\xce\x6d\x03\x0f\x6f\xab\x78\xba\xab\x32\x77\xf5\x70\x26\x55\x50\xc1\xfa\xdd\xbc\xa2\x5b\xa2\x5a\xce\x5a\x54\xcb\xdb\xa2\xd6\xe7\x5e\xcd\x3a\x99\xd0\x04\x0d\x39\xa2\x16\x7d\x72\x4d\x91\x8f\xca\x5a\x4c\xe5\xa0\x3a\x57\x40\x4b\x06\x45\x1b\x32\x4f\xcb\xc2\xa9\xc7\x02\x72\x1f\x63\xc2\x9c\xc5\x51\x25\x4f\xde\xe6\x4b\xc0\xa9\xdf\x83\x48\xe8\x0d\x26\xf2\x76\x5b\xcb\x51\x7c\x3e\xb6\x71\xd5\x20\x27\xdd\x14\x52\x26\xdc\x91\x73\x43\x69\x89\xdb\x7e\x57\x52\x90\xe3\x4a\xc8\x84\x0e\x55\xc6\x2c\x0f\xeb\x72\xfd\xa1\xac\x26\x99\xb2\x23\x5f\xfe\xca\xc5\xb6\x96\x93\xcc\xc5\xdb\x64\xa8\x96\xd3\x7f\xf9\x2f\x00\x00\xff\xff\x2d\x78\xb9\xd3\xaf\x03\x00\x00")

func docsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docsIndexHtml,
		"docs/index.html",
	)
}

func docsIndexHtml() (*asset, error) {
	bytes, err := docsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/index.html", size: 943, mode: os.FileMode(420), modTime: time.Unix(1547037066, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x51\x6f\xe3\xb8\x11\x7e\xf7\xaf\x18\xb0\xc5\x3e\x9d\x2d\xdb\x89\x93\x9c\xd0\xb4\xd8\xde\xa6\xd8\xa0\xdd\x43\xb0\xc9\x3d\x2d\x0e\x05\x2d\x8d\x24\xe6\x24\x92\x21\x47\x76\x9c\xb6\xff\xbd\x20\x25\xcb\x92\x25\x3b\x9b\x3d\x1f\xda\x87\xcb\x43\x12\x93\xa3\x99\x6f\xbe\x99\xe1\x0c\x65\xbb\xe6\x69\x8a\x26\x04\x36\x9f\x4c\xd9\xc8\x46\x19\x16\x68\xc3\x11\xc0\x18\x58\x46\xa4\xd9\xee\x5f\xcb\x46\x99\xb2\x14\x02\x13\x05\x4f\x71\xb2\x51\xa5\x19\xc7\xaa\xe0\x42\x4e\x28\x8f\xd9\x68\xc9\x2d\xde\x71\xca\x42\x60\x01\x1b\x69\xa3\xe2\x32\x6a\x94\x71\xad\x73\x11\x71\x12\x4a\x06\x8f\x56\x49\x36\x8a\x94\xb4\x65\x71\x44\x40\xc8\x44\xb9\x4d\x12\x94\x63\x08\xec\xe3\x46\xa3\xd1\x22\x82\xf7\x77\xb7\x0e\xd7\x0a\x8d\x15\x4a\x86\xc0\x56\xb3\xc9\xcc\xe1\x07\x78\x1e\xe7\x2a\xf5\x4f\x01\x94\x26\x0f\x6b\xe8\x61\x10\x44\xb1\x9c\x18\xbe\x4e\x05\x4d\x22\x55\x04\x99\x53\x66\x23\x9e\x63\xf5\xaf\x16\x51\x50\x70\x4b\x68\x82\x7f\x1a\xb4\xaa\x34\x11\xda\x66\x6b\x62\x57\xa9\x53\x1f\xa3\x8d\x8c\xd0\xe4\xcd\xfe\x8d\x5b\x82\x8f\x0f\x0f\x77\x50\x88\xc8\x28\x8b\x66\x25\x22\x84\x44\x19\xc8\x44\x9a\x8d\x73\x5c\x61\x0e\x9e\x2c\xd0\x46\x45\x68\xad\x90\xe9\x64\x04\x90\x8b\x08\xa5\xc5\x0a\xa6\xe4\x85\xf3\xee\xd3\xed\x03\x1b\x80\x9d\x0a\xca\xca\xe5\x41\xc8\xcb\x5c\x2d\xb7\xb8\xff\x71\xfb\xc3\xcd\x8f\xf7\x37\x93\x22\x66\x23\x8b\x51\x69\x04\x6d\x3e\x60\x22\xa4\x70\x78\x3d\xcf\x7f\x45\x6e\xd0\x54\x76\x3b\xbe\xdc\x63\x64\x90\xe0\x17\xdc\xf8\x3d\xda\x68\x0c\x81\x6b\xf1\xf7\x7a\xa1\x02\xf9\xbe\xa4\x4c\x19\xf1\xe2\xa3\xe4\xd7\x85\x0c\x21\x43\x1e\xa3\x19\x11\x4f\xeb\x58\xd6\x1e\xdd\x3a\xcf\x2b\x9f\x9e\xc7\xb1\xb0\x3a\xe7\x9b\x1f\x7b\x5b\x1d\x18\xec\x07\x83\x9c\x10\xb8\x8c\xa1\xe0\xd2\x31\x27\xb6\xa2\x8d\xde\x4f\x4a\x0a\x52\x46\xc8\x74\x58\xf9\xfe\x7e\xd7\xc2\x47\xe4\x39\x65\x10\x65\x18\xfd\x02\x2e\x66\x68\x2a\x73\x48\x46\x44\x96\x8d\xe2\x2e\x65\x95\xfc\x67\xb4\x5a\x35\x21\xab\xe8\x61\x6a\xf9\x88\x11\x55\x46\x0c\x3e\x95\xc2\x60\x1c\xc2\x17\x66\x89\x53\x69\xd9\xcf\x7e\x43\x1b\xa5\xd1\x90\xa8\x12\xdd\xfd\x54\xdb\xdb\x4f\x8d\xb6\xa5\x52\x39\x6b\x16\xbb\xa0\x1f\x32\xac\x1f\x03\x95\xd4\xa8\x2b\x59\x7c\xe6\x85\xce\x71\x4f\x37\x90\x29\x71\x04\xe0\x79\xfe\x80\x39\x12\xbe\xc9\x83\x88\x47\x19\xb2\xef\x80\x55\x85\x70\xd0\x15\x2f\xf7\x2b\x3c\xf1\xcf\x43\x22\x72\xdc\xca\x57\x06\x7f\x0d\x39\x5e\x41\x4b\xe7\x1e\x43\x15\xe4\x2d\x41\x2d\x93\x90\xf0\xdc\x36\xa4\xfd\xa4\x73\xc5\xe3\x37\x91\xe6\x4d\x3a\xce\xc4\x8b\xff\xeb\xc4\xdd\xdf\x8c\xdb\xec\x20\x83\xee\xa1\x9e\xb7\x96\x76\xd9\x3b\xec\xaf\xe6\x94\x39\x6f\x4b\x0f\x13\xe3\xaa\x4c\x26\x0d\x8b\xe2\xa5\xaf\x55\x48\xc2\x74\x9b\x37\x07\x68\x14\x2f\x78\x44\xad\x57\xf4\x76\xb0\x85\x28\xd0\x4b\x1f\x51\xed\x48\xfa\x16\xd5\xf1\xc2\x3f\x7a\x50\xf3\x5e\xf4\x3d\xdd\xc0\x02\x42\x4b\x93\x47\x9d\x76\x08\x83\xd9\x7c\xb1\x38\x5f\x8c\xba\xac\x39\x65\xc1\xa3\xc6\xb4\x03\x15\xd8\x65\x72\x79\x91\x24\x57\x17\xb3\x45\x7c\x71\x8e\x97\x57\x57\xc8\x17\xf8\xfd\xc5\xd9\x59\x8c\xc9\xec\x62\xbe\x70\xe2\x37\xc6\x28\xd3\x4d\xa2\xae\x0f\x9f\x51\x1b\xb4\x28\xc9\x02\x97\x80\x4e\xbc\x06\xfe\x4a\xb2\x79\xd1\x83\x59\xe5\x77\xc3\x23\xbc\xb5\x2d\x1d\xb0\x36\xac\xd9\x97\x90\x8a\xb1\xfd\xf9\x70\x86\x0d\x1b\x77\xcf\xbb\x80\xed\x83\x00\x28\xd0\x5a\x9e\x0e\x2b\xdf\x4f\x86\x03\x09\x51\x69\xd8\x57\xbf\x97\x06\x7b\xfc\x78\x87\x60\x36\x9d\x8f\xf6\x81\x00\xbb\x57\x05\x52\x26\x64\x0a\x6b\x94\x04\x6b\xa3\x64\x3a\x61\x23\x57\x80\x9e\x94\xa0\x6e\x1c\x95\xb6\x14\xa9\x39\x8a\xcb\xa2\xe0\x66\x13\x02\xbb\x33\x5e\x07\x96\x76\xd7\x65\x1a\x7e\x9b\x21\xa9\xfa\x19\x03\x23\x7c\xa6\x40\xe7\x5c\xc8\xad\x98\xa9\x33\xa8\x25\x37\x9f\x4e\xdb\x2c\x75\x89\x90\xaa\xf2\xb0\xa9\x5b\xd7\x9a\xe1\x4b\xbb\x33\xba\xcc\x09\x32\xdf\xdb\x8e\x20\xaf\x04\xaa\x5e\x89\x32\xd6\x4a\x48\x3a\x8a\xbd\x3f\xc5\x9d\xc6\x03\x0f\xcb\x4d\xa7\xbc\x9b\x1b\x7f\x34\x98\x84\xc0\xfe\x10\xb4\xba\x76\xd0\x6d\xd9\x3b\x15\x8b\x63\x16\xeb\x51\xe0\xdb\xad\x76\x6a\xfd\x35\xe6\xff\xe5\x0e\xa2\xff\x6c\x4f\x04\xd7\x9f\xfb\xe4\x57\x7d\x7b\x37\x00\xf9\xdd\x7a\xae\x6b\x93\x5e\x0f\x75\xf0\xe5\xe7\xff\xfb\xc8\x0c\xcc\x23\xff\xd3\xf0\x68\x6e\x78\x81\x84\xa6\xc3\x55\x3d\x67\xb6\xc7\x12\xa8\x67\x5d\xe6\xea\xbe\xbd\xb8\x3b\x93\x5b\x13\x45\x1f\x7e\xd3\xb3\xdd\xa8\xe9\xf4\xbb\x03\xca\x19\xe8\x1c\x7f\x07\x4e\xba\x1d\x22\xa3\x8a\x1e\xa2\xa7\x12\xcd\xe6\x2b\xb4\xf4\x5b\x4f\xa1\x56\xd8\x1a\xc1\x40\x99\xed\xf4\xb4\x16\x6e\x44\xee\x0d\x67\x95\x92\x84\x97\x39\x85\xd5\x76\x6b\x03\x65\x59\x74\xe3\x30\xee\xc9\xb8\xb5\xca\xc4\x5e\x7d\x54\x17\x82\xba\x9d\xb9\x5b\x66\xaf\x1a\xaa\x81\xec\xdb\xaa\xe1\xab\x8b\xa1\x7d\x27\xdd\x0a\x17\x65\x4e\x42\x73\x43\x41\xa2\x4c\x31\x8e\x39\xf1\xd6\xee\x6e\x3c\xe8\x2d\x6a\xd9\x5f\x5b\xe3\x52\x1f\x2b\xbc\xd9\x6f\x59\x78\xdd\x99\xf6\xf7\xc2\xdb\x3d\xf3\x5a\xe1\x75\xb2\xae\x81\xe4\xca\xf1\x03\x27\x1c\xd0\xb4\xef\xc2\x1b\xd0\x76\xc7\x58\x70\xf9\x36\xd9\x6f\x27\xed\x72\x19\x6c\xdc\xf5\x8d\xb8\x5b\x2e\x83\x7d\xa1\x3f\xdf\xb6\x96\x5d\xba\x0e\x2c\x6b\x39\x24\x9c\x8a\x64\x60\x95\x44\x92\x9c\xae\xd7\x9c\x1f\x13\x5f\xf2\xd8\x13\x8d\x96\x4e\x97\xa9\xbf\x97\xc7\xeb\xe5\xb1\xfe\xea\xa6\x34\x70\x43\xe8\x02\xba\x47\xb2\x40\x99\x6b\x41\x71\x75\xc5\x75\x1f\x7c\x2a\x7d\x07\x42\x82\x16\xcf\x98\xdb\xc9\x00\x88\xec\x37\x00\x91\xa1\x48\x33\x7a\x0b\x8a\x44\xd0\xc9\x3a\xb4\x87\x91\xa9\xf5\xce\x38\x08\x0b\x89\x20\xc2\x18\x48\x81\x70\x28\xb9\x49\x91\x20\x16\x05\x4a\xeb\x12\xaa\x13\xb8\xa1\x9e\xcc\x22\xa3\x34\x1b\x5a\x1c\x27\x2a\xe2\xf9\xb8\x33\xe5\xb7\x5c\x8b\xb5\x39\x1d\xc5\x9f\x7c\x57\xcd\xb1\xe2\x59\xad\xd0\xf0\x7c\xfb\xb2\xd4\x5d\xc6\x87\xb8\x7d\x3a\x9d\x79\xff\x5e\xb4\x36\xfe\x54\xf2\x5c\xd0\xa6\x13\xe5\xc1\xd0\x9e\x6e\xf6\xba\x91\xee\xca\x69\x5b\x81\x25\x05\x1c\xac\xc6\x48\x24\x22\x02\x37\x69\x70\x7a\x3d\x94\xad\x37\x18\xcd\x9a\xde\xbf\x24\x8f\x81\xed\x9f\xe3\xb5\x47\xea\x84\x01\xfd\xac\x88\x53\xdb\xa5\xd7\xd1\x4f\x7b\x38\xcf\x17\xbd\xa5\xef\xfb\x52\xb3\xb3\xbe\xd8\xec\xaa\x2f\x37\x1f\x90\x9b\x5f\xf6\xe5\xce\x66\x8b\x01\x72\x96\x79\x79\x42\x7a\xde\xc7\xb1\x05\x0e\x4e\x29\x60\x92\x60\x44\x2e\xe4\x3b\xb2\xe0\x27\x8b\xb0\xe2\x79\x89\x16\x96\x48\x6b\x44\x09\x53\x7f\x2a\xcf\xa6\xd3\xa3\xfd\x1f\xe0\x79\xec\xb2\x69\x6c\xfd\x2b\x8e\x4e\xc7\xc8\xb9\x4c\x43\xc8\xa8\xc8\xdb\xad\xa9\x7e\xdf\xf9\xef\x0e\x0f\x7f\x12\x45\x0a\xd6\x44\xd7\xcd\x57\x0f\x83\x5f\xf3\x34\x6f\xce\xfe\xb2\xbe\x9e\x2d\xa6\xef\x32\xff\x3b\x11\x74\xed\x4e\x90\x77\xb1\x36\xd7\xf3\x77\x4f\xd7\x57\x0b\x06\x3c\xa7\x6b\xc6\x20\xf8\xf3\xe8\xbf\x01\x00\x00\xff\xff\x09\x09\x71\x48\x67\x1a\x00\x00")

func docsSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerYaml,
		"docs/swagger.yaml",
	)
}

func docsSwaggerYaml() (*asset, error) {
	bytes, err := docsSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.yaml", size: 6759, mode: os.FileMode(420), modTime: time.Unix(1547209621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/index.html":   docsIndexHtml,
	"docs/swagger.yaml": docsSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"index.html":   &bintree{docsIndexHtml, map[string]*bintree{}},
		"swagger.yaml": &bintree{docsSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
