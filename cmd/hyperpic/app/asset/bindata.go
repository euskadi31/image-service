// Code generated by go-bindata.
// sources:
// docs/index.html
// docs/swagger.yaml
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x8e\xd3\x30\x10\xbd\xf3\x15\xd3\x5c\xb8\xe0\x38\x5d\x84\x04\x25\xa9\x84\x58\x24\x38\xb1\x5a\x71\xe1\xe8\xda\x53\x67\x90\x63\x5b\xf6\xa4\x6d\x40\xfc\x3b\x6a\xa2\xb6\xc9\xaa\x22\x97\xf8\x79\x5e\xde\xcc\x9b\x99\xd4\xab\xc7\xef\x9f\x7f\xfc\x7c\xfa\x02\x2d\x77\x6e\xfb\xaa\x9e\x5e\x00\x00\x75\x8b\xca\x4c\xc7\x11\x32\xb1\xc3\xed\xd7\x21\x62\x8a\xa4\xe1\xd3\xd3\x37\x78\xc6\x3d\x26\xf4\x1a\x6b\x39\x45\x6f\xec\x95\x10\xe0\x11\x0d\x1a\xd8\x87\x04\xca\xa8\xc8\x74\x40\x30\x98\xc9\x7a\x10\x62\xc6\xed\x90\x15\x78\xd5\x61\x53\x1c\x08\x8f\x31\x24\x2e\x40\x07\xcf\xe8\xb9\x29\x8e\x64\xb8\x6d\x0c\x1e\x48\xa3\x18\xc1\x1b\x20\x4f\x4c\xca\x89\xac\x95\xc3\x66\x5d\x80\xbc\x2f\x67\x30\xeb\x44\x91\x29\xf8\x99\xe2\xb5\xec\xb1\x34\x6e\x71\x34\x93\x31\x1d\xd0\xc0\x6e\x80\x8b\xc7\xf2\x8e\xae\x6e\x55\xca\xc8\x4d\xd1\xf3\x5e\xbc\x5f\x12\x56\x42\x5c\xc1\x33\x3e\x06\x0d\x26\x60\xf6\xaf\xf9\xfc\x95\xb7\x08\xa1\x67\x4c\x10\x95\x45\xc8\x3c\x38\xcc\x57\xfa\xa2\x1f\x63\xec\x86\x77\xc1\x0c\xf0\xe7\x0a\xcf\x4f\xa7\x92\x25\xbf\x81\xea\xe3\xe2\x3a\x2a\x63\xc8\xdb\xc5\xfd\xdf\xeb\x49\x45\x12\x2e\xd8\xf0\x42\xab\x45\xb2\x2d\x6f\x60\x5d\x55\xf1\xb4\xd4\x63\x3c\xb1\x50\x8e\xac\xdf\x80\xc3\x3d\xc3\x8a\xba\xf3\x74\x94\xe7\xff\x26\xa0\xce\xbe\x48\x32\xce\x6d\x03\x0f\x6f\xab\x78\xba\xab\x32\x77\xf5\x70\x26\x55\x50\xc1\xfa\xdd\xbc\xa2\x5b\xa2\x5a\xce\x5a\x54\xcb\xdb\xa2\xd6\xe7\x5e\xcd\x3a\x99\xd0\x04\x0d\x39\xa2\x16\x7d\x72\x4d\x91\x8f\xca\x5a\x4c\xe5\xa0\x3a\x57\x40\x4b\x06\x45\x1b\x32\x4f\xcb\xc2\xa9\xc7\x02\x72\x1f\x63\xc2\x9c\xc5\x51\x25\x4f\xde\xe6\x4b\xc0\xa9\xdf\x83\x48\xe8\x0d\x26\xf2\x76\x5b\xcb\x51\x7c\x3e\xb6\x71\xd5\x20\x27\xdd\x14\x52\x26\xdc\x91\x73\x43\x69\x89\xdb\x7e\x57\x52\x90\xe3\x4a\xc8\x84\x0e\x55\xc6\x2c\x0f\xeb\x72\xfd\xa1\xac\x26\x99\xb2\x23\x5f\xfe\xca\xc5\xb6\x96\x93\xcc\xc5\xdb\x64\xa8\x96\xd3\x7f\xf9\x2f\x00\x00\xff\xff\x2d\x78\xb9\xd3\xaf\x03\x00\x00")

func docsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_docsIndexHtml,
		"docs/index.html",
	)
}

func docsIndexHtml() (*asset, error) {
	bytes, err := docsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/index.html", size: 943, mode: os.FileMode(420), modTime: time.Unix(1527194572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x51\x6f\xe3\xb8\x11\x7e\xf7\xaf\x18\xb0\xc5\x3e\x9d\x2d\xdb\x89\x93\x9c\xd0\xb4\xd8\xde\xa6\xd8\xa0\xdd\x43\xb0\xc9\x3d\x2d\x0e\x05\x2d\x8d\x24\xe6\x24\x92\x21\x47\x76\x9c\xb6\xff\xbd\x20\x25\xcb\x92\x25\x3b\x9b\x3d\x1f\xda\x87\xcb\x43\x12\x93\xa3\x99\x6f\xbe\x99\xe1\x0c\x65\xbb\xe6\x69\x8a\x26\x04\x36\x9f\x4c\xd9\xc8\x46\x19\x16\x68\xc3\x11\xc0\x18\x58\x46\xa4\xd9\xee\x5f\xcb\x46\x99\xb2\x14\x02\x13\x05\x4f\x71\xb2\x51\xa5\x19\xc7\xaa\xe0\x42\x4e\x28\x8f\xd9\x68\xc9\x2d\xde\x71\xca\x42\x60\x01\x1b\x69\xa3\xe2\x32\x6a\x94\x71\xad\x73\x11\x71\x12\x4a\x06\x8f\x56\x49\x36\x8a\x94\xb4\x65\x71\x44\x40\xc8\x44\xb9\x4d\x12\x94\x63\x08\xec\xe3\x46\xa3\xd1\x22\x82\xf7\x77\xb7\x0e\xd7\x0a\x8d\x15\x4a\x86\xc0\x56\xb3\xc9\x7c\x32\x77\x6b\xcf\xe3\x5c\xa5\xfe\x29\x80\xd2\xe4\x61\x0d\x3d\x0c\x82\x28\x96\x13\xc3\xd7\xa9\xa0\x49\xa4\x8a\x20\x73\xca\x6c\xc4\x73\xac\xfe\xd5\x22\x0a\x0a\x6e\x09\x4d\xf0\x4f\x83\x56\x95\x26\x42\xdb\x6c\x4d\xec\x2a\x75\xea\x63\xb4\x91\x11\x9a\xbc\xd9\xbf\x71\x4b\xf0\xf1\xe1\xe1\x0e\x0a\x11\x19\x65\xd1\xac\x44\x84\x90\x28\x03\x99\x48\xb3\x71\x8e\x2b\xcc\xc1\x93\x05\xda\xa8\x08\xad\x15\x32\x9d\x8c\x00\x72\x11\xa1\xb4\x58\xc1\x94\xbc\x70\xde\x7d\xba\x7d\x60\x03\xb0\x53\x41\x59\xb9\x3c\x08\x79\x99\xab\xe5\x16\xf7\x3f\x6e\x7f\xb8\xf9\xf1\xfe\x66\x52\xc4\x6c\x64\x31\x2a\x8d\xa0\xcd\x07\x4c\x84\x14\x0e\xaf\xe7\xf9\xaf\xc8\x0d\x9a\xca\x6e\xc7\x97\x7b\x8c\x0c\x12\xfc\x82\x1b\xbf\x47\x1b\x8d\x21\x70\x2d\xfe\x5e\x2f\x54\x20\xdf\x97\x94\x29\x23\x5e\x7c\x94\xfc\xba\x90\x21\x64\xc8\x63\x34\x23\xe2\x69\x1d\xcb\xda\xa3\x5b\xe7\x79\xe5\xd3\xf3\x38\x16\x56\xe7\x7c\xf3\x63\x6f\xab\x03\x83\xfd\x60\x90\x13\x02\x97\x31\x14\x5c\x3a\xe6\xc4\x56\xb4\xd1\xfb\x49\x49\x41\xca\x08\x99\x0e\x2b\xdf\xdf\xef\x5a\xf8\x88\x3c\xa7\x0c\xa2\x0c\xa3\x5f\xc0\xc5\x0c\x4d\x65\x0e\xc9\x88\xc8\xb2\x51\xdc\xa5\xac\x92\xff\x8c\x56\xab\x26\x64\x15\x3d\x4c\x2d\x1f\x31\xa2\xca\x88\xc1\xa7\x52\x18\x8c\x43\xf8\xc2\x2c\x71\x2a\x2d\xfb\xd9\x6f\x68\xa3\x34\x1a\x12\x55\xa2\xbb\x9f\x6a\x7b\xfb\xa9\xd1\xb6\x54\x2a\x67\xcd\x62\x17\xf4\x43\x86\xf5\x63\xa0\x92\x1a\x75\x25\x8b\xcf\xbc\xd0\x39\xee\xe9\x06\x32\x25\x8e\x00\x3c\xcf\x1f\x30\x47\xc2\x37\x79\x10\xf1\x28\x43\xf6\x1d\xb0\xaa\x10\x0e\xba\xe2\xe5\x7e\x85\x27\xfe\x79\x48\x44\x8e\x5b\xf9\xca\xe0\xaf\x21\xc7\x2b\x68\xe9\xdc\x63\xa8\x82\xbc\x25\xa8\x65\x12\x12\x9e\xdb\x86\xb4\x9f\x74\xae\x78\xfc\x26\xd2\xbc\x49\xc7\x99\x78\xf1\x7f\x9d\xb8\xfb\x9b\x71\x9b\x1d\x64\xd0\x3d\xd4\xf3\xd6\xd2\x2e\x7b\x87\xfd\xd5\x9c\x32\xe7\x6d\xe9\x61\x62\x5c\x95\xc9\xa4\x61\x51\xbc\xf4\xb5\x0a\x49\x98\x6e\xf3\xe6\x00\x8d\xe2\x05\x8f\xa8\xf5\x8a\xde\x0e\xb6\x10\x05\x7a\xe9\x23\xaa\x1d\x49\xdf\xa2\x3a\x5e\xf8\x47\x0f\x6a\xde\x8b\xbe\xa7\x1b\x58\x40\x68\x69\xf2\xa8\xd3\x0e\x61\x30\x9b\x2f\x16\xe7\x8b\x51\x97\x35\xa7\x2c\x78\xd4\x98\x76\xa0\x02\xbb\x4c\x2e\x2f\x92\xe4\xea\x62\xb6\x88\x2f\xce\xf1\xf2\xea\x0a\xf9\x02\xbf\xbf\x38\x3b\x8b\x31\x99\x5d\xcc\x17\x4e\xfc\xc6\x18\x65\xba\x49\xd4\xf5\xe1\x33\x6a\x83\x16\x25\x59\xe0\x12\xd0\x89\xd7\xc0\x5f\x49\x36\x2f\x7a\x30\xab\xfc\x6e\x78\x84\xb7\xb6\xa5\x03\xd6\x86\x35\xfb\x12\x52\x31\xb6\x3f\x1f\xce\xb0\x61\xe3\xee\x79\x17\xb0\x7d\x10\x00\x05\x5a\xcb\xd3\x61\xe5\xfb\xc9\x70\x20\x21\x2a\x0d\xfb\xea\xf7\xd2\x60\x8f\x1f\xef\x10\xcc\xa6\xf3\xd1\x3e\x10\x60\xf7\xaa\x40\xca\x84\x4c\x61\x8d\x92\x60\x6d\x94\x4c\x27\x6c\xe4\x0a\xd0\x93\x12\xd4\x8d\xa3\xd2\x96\x22\x35\x47\x71\x59\x14\xdc\x6c\x42\x60\x77\xc6\xeb\xc0\xd2\xee\xba\x4c\xc3\x6f\x33\x24\x55\x3f\x63\x60\x84\xcf\x14\xe8\x9c\x0b\xb9\x15\x33\x75\x06\xb5\xe4\xe6\xd3\x69\x9b\xa5\x2e\x11\x52\x55\x1e\x36\x75\xeb\x5a\x33\x7c\x69\x77\x46\x97\x39\x41\xe6\x7b\xdb\x11\xe4\x95\x40\xd5\x2b\x51\xc6\x5a\x09\x49\x47\xb1\xf7\xa7\xb8\xd3\x78\xe0\x61\xb9\xe9\x94\x77\x73\xe3\x8f\x06\x93\x10\xd8\x1f\x82\x56\xd7\x0e\xba\x2d\x7b\xa7\x62\x71\xcc\x62\x3d\x0a\x7c\xbb\xd5\x4e\xad\xbf\xc6\xfc\xbf\xdc\x41\xf4\x9f\xed\x89\xe0\xfa\x73\x9f\xfc\xaa\x6f\xef\x06\x20\xbf\x5b\xcf\x75\x6d\xd2\xeb\xa1\x0e\xbe\xfc\xfc\x7f\x1f\x99\x81\x79\xe4\x7f\x1a\x1e\xcd\x0d\x2f\x90\xd0\x74\xb8\xaa\xe7\xcc\xf6\x58\x02\xf5\xac\xcb\x5c\xdd\xb7\x17\x77\x67\x72\x6b\xa2\xe8\xc3\x6f\x7a\xb6\x1b\x35\x9d\x7e\x77\x40\x39\x03\x9d\xe3\xef\xc0\x49\xb7\x43\x64\x54\xd1\x43\xf4\x54\xa2\xd9\x7c\x85\x96\x7e\xeb\x29\xd4\x0a\x5b\x23\x18\x28\xb3\x9d\x9e\xd6\xc2\x8d\xc8\xbd\xe1\xac\x52\x92\xf0\x32\xa7\xb0\xda\x6e\x6d\xa0\x2c\x8b\x6e\x1c\xc6\x3d\x19\xb7\x56\x99\xd8\xab\x8f\xea\x42\x50\xb7\x33\x77\xcb\xec\x55\x43\x35\x90\x7d\x5b\x35\x7c\x75\x31\xb4\xef\xa4\x5b\xe1\xa2\xcc\x49\x68\x6e\x28\x48\x94\x29\xc6\x31\x27\xde\xda\xdd\x8d\x07\xbd\x45\x2d\xfb\x6b\x6b\x5c\xea\x63\x85\x37\xfb\x2d\x0b\xaf\x3b\xd3\xfe\x5e\x78\xbb\x67\x5e\x2b\xbc\x4e\xd6\x35\x90\x5c\x39\x7e\xe0\x84\x03\x9a\xf6\x5d\x78\x03\xda\xee\x18\x0b\x2e\xdf\x26\xfb\xed\xa4\x5d\x2e\x83\x8d\xbb\xbe\x11\x77\xcb\x65\xb0\x2f\xf4\xe7\xdb\xd6\xb2\x4b\xd7\x81\x65\x2d\x87\x84\x53\x91\x0c\xac\x92\x48\x92\xd3\xf5\x9a\xf3\x63\xe2\x4b\x1e\x7b\xa2\xd1\xd2\xe9\x32\xf5\xf7\xf2\x78\xbd\x3c\xd6\x5f\xdd\x94\x06\x6e\x08\x5d\x40\xf7\x48\x16\x28\x73\x2d\x28\xae\xae\xb8\xee\x83\x4f\xa5\xef\x40\x48\xd0\xe2\x19\x73\x3b\x19\x00\x91\xfd\x06\x20\x32\x14\x69\x46\x6f\x41\x91\x08\x3a\x59\x87\xf6\x30\x32\xb5\xde\x19\x07\x61\x21\x11\x44\x18\x03\x29\x10\x0e\x25\x37\x29\x12\xc4\xa2\x40\x69\x5d\x42\x75\x02\x37\xd4\x93\x59\x64\x94\x66\x43\x8b\xe3\x44\x45\x3c\x1f\x77\xa6\xfc\x96\x6b\xb1\x36\xa7\xa3\xf8\x93\xef\xaa\x39\x56\x3c\xab\x15\x1a\x9e\x6f\x5f\x96\xba\xcb\xf8\x10\xb7\x4f\xa7\x33\xef\xdf\x8b\xd6\xc6\x9f\x4a\x9e\x0b\xda\x74\xa2\x3c\x18\xda\xd3\xcd\x5e\x37\xd2\x5d\x39\x6d\x2b\xb0\xa4\x80\x83\xd5\x18\x89\x44\x44\xe0\x26\x0d\x4e\xaf\x87\xb2\xf5\x06\xa3\x59\xd3\xfb\x97\xe4\x31\xb0\xfd\x73\xbc\xf6\x48\x9d\x30\xa0\x9f\x15\x71\x6a\xbb\xf4\x3a\xfa\x69\x0f\xe7\xf9\xa2\xb7\xf4\x7d\x5f\x6a\x76\xd6\x17\x9b\x5d\xf5\xe5\xe6\x03\x72\xf3\xcb\xbe\xdc\xd9\x6c\x31\x40\xce\x32\x2f\x4f\x48\xcf\xfb\x38\xb6\xc0\xc1\x29\x05\x4c\x12\x8c\xc8\x85\x7c\x47\x16\xfc\x64\x11\x56\x3c\x2f\xd1\xc2\x12\x69\x8d\x28\x61\xea\x4f\xe5\xd9\x74\x7a\xb4\xff\x03\x3c\x8f\x5d\x36\x8d\xad\x7f\xc5\xd1\xe9\x18\x39\x97\x69\x08\x19\x15\x79\xbb\x35\xd5\xef\x3b\xff\xdd\xe1\xe1\x4f\xa2\x48\xc1\x9a\xe8\xba\xf9\xea\x61\xf0\x6b\x9e\xe6\xcd\xd9\x5f\xd6\xd7\xb3\xc5\xf4\x5d\xe6\x7f\x27\x82\xae\xdd\x09\xf2\x2e\xd6\xe6\x7a\xfe\xee\xe9\xfa\x6a\xc1\x80\xe7\x74\xcd\x18\x04\x7f\x1e\xfd\x37\x00\x00\xff\xff\x47\x37\xbe\x21\x67\x1a\x00\x00")

func docsSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerYaml,
		"docs/swagger.yaml",
	)
}

func docsSwaggerYaml() (*asset, error) {
	bytes, err := docsSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.yaml", size: 6759, mode: os.FileMode(420), modTime: time.Unix(1547410858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/index.html": docsIndexHtml,
	"docs/swagger.yaml": docsSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{docsIndexHtml, map[string]*bintree{}},
		"swagger.yaml": &bintree{docsSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

